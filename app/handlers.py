"""
Telegram bot message handlers.
"""
import asyncio
from pathlib import Path
from typing import Optional
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

from .config import settings
from .utils import is_tiktok_url, cleanup_temp_files, check_audio_duration, get_video_info
from .yt_dlp_client import YtDlpClient
from .stt_engine import STTEngine
from .openai_client import OpenAIClient
from .video_processor import VideoProcessor
from .rate_limiter import rate_limiter
from .logger import get_logger

logger = get_logger(__name__)

router = Router()


class ProcessingStates(StatesGroup):
    """States for processing TikTok videos."""
    processing = State()


@router.message(F.text == "/start")
async def cmd_start(message: Message):
    """Handle /start command."""
    welcome_text = """ü§ñ **–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π TikTok –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞**
*Powered by GPT-5*

–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ, –∏ —è:
1. üìù –ò–∑–≤–ª–µ–∫—É —Å—É–±—Ç–∏—Ç—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
2. üéµ –°–∫–∞—á–∞—é –∏ —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∞—É–¥–∏–æ (–µ—Å–ª–∏ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤)  
3. üß† –ü—Ä–æ–≤–µ–¥—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é GPT-5

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å TikTok URL, –Ω–∞–ø—Ä–∏–º–µ—Ä:
`https://www.tiktok.com/@username/video/1234567890`

**üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ GPT-5:**
‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π)
‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π
‚Ä¢ –û—Ü–µ–Ω–∫–∞ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ engagement –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –∫—ç–ø—à–Ω—ã –¥–ª—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç–µ–π
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

‚ö†Ô∏è **–ü—Ä–∞–≤–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Å–æ–±–ª—é–¥–∞–π—Ç–µ –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TikTok."""
    
    await message.answer(welcome_text, parse_mode="Markdown")


@router.message(F.text == "/help")
async def cmd_help(message: Message):
    """Handle /help command."""
    help_text = """üìñ **–°–ø—Ä–∞–≤–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ**

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
‚Ä¢ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ URL:**
‚Ä¢ `https://www.tiktok.com/@username/video/...`
‚Ä¢ `https://vt.tiktok.com/...`

**–≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
1. **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤** - –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
2. **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ** - –°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞, –µ—Å–ª–∏ –Ω–µ—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤
3. **–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞** - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Whisper AI –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
4. **–ê–Ω–∞–ª–∏–∑** - GPT-5 –ø—Ä–æ–≤–æ–¥–∏—Ç –≥–ª—É–±–æ–∫–∏–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

**–†–µ–∑—É–ª—å—Ç–∞—Ç:**
‚Ä¢ üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (—Å—É–±—Ç–∏—Ç—Ä—ã –∏–ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞)
‚Ä¢ üìä –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç GPT-5 —Å –∏–Ω—Å–∞–π—Ç–∞–º–∏, –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

**–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø–æ–ª–∞–¥–æ–∫:**
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ TikTok –≤–∏–¥–µ–æ –ø—É–±–ª–∏—á–Ω–æ–µ
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
‚Ä¢ –ë–æ–ª—å—à–∏–µ –≤–∏–¥–µ–æ –º–æ–≥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –¥–æ–ª—å—à–µ

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –¥—Ä—É–≥–∏–º –≤–∏–¥–µ–æ."""
    
    await message.answer(help_text, parse_mode="Markdown")


@router.message(F.text.regexp(r"(https?://)?(www\.)?(vt\.)?tiktok\.com"))
async def handle_tiktok_url(message: Message, state: FSMContext):
    """Handle TikTok URL messages."""
    user_id = message.from_user.id
    
    # Check rate limiting
    allowed, error_msg = rate_limiter.is_allowed(user_id)
    if not allowed:
        await message.answer(f"‚è±Ô∏è {error_msg}")
        return
    
    text = message.text.strip()
    
    # Extract URLs from message
    urls = [word for word in text.split() if is_tiktok_url(word)]
    
    if not urls:
        await message.answer("‚ùå –í –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö TikTok —Å—Å—ã–ª–æ–∫.")
        return
    
    # Process the first URL found
    url = urls[0]
    logger.info(f"Processing TikTok URL: {url[-8:]} from user {user_id}")
    
    # Check video duration before processing
    video_info = await asyncio.to_thread(get_video_info, url)
    if video_info and not check_audio_duration(video_info):
        duration_min = video_info.get('duration', 0) / 60
        await message.answer(f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration_min:.1f} –º–∏–Ω). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.max_audio_duration_minutes} –º–∏–Ω.")
        return
    
    # Set processing state
    await state.set_state(ProcessingStates.processing)
    
    try:
        # Send processing message
        processing_msg = await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é TikTok –≤–∏–¥–µ–æ...")
        
        # Initialize clients
        yt_client = None
        stt_engine = None
        openai_client = None
        
        try:
            yt_client = YtDlpClient()
            stt_engine = STTEngine()
            openai_client = OpenAIClient()
            processor = VideoProcessor(yt_client, stt_engine, openai_client)
        except Exception as e:
            logger.error(f"Failed to initialize clients: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        text_content = None
        segments = None
        temp_files = []
        txt_path = None
        
        # Step 1: Try to get subtitles
        await message.answer("üìù –ü—Ä–æ–≤–µ—Ä—è—é —Å—É–±—Ç–∏—Ç—Ä—ã...")
        try:
            text_content, subtitle_temp_files = await processor.extract_subtitles(url)
            temp_files.extend(subtitle_temp_files)
            
            if text_content:
                await message.answer("‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã! –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Ç–µ–∫—Å—Ç...")
                # Find the txt file in temp_files
                for file in temp_files:
                    if file.suffix == '.txt':
                        txt_path = file
                        break
        except Exception as e:
            logger.error(f"Error extracting subtitles: {e}")
        
        if not text_content:
            # Step 2: Download audio and transcribe
            await message.answer("üéµ –°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–∫–∞—á–∏–≤–∞—é –∞—É–¥–∏–æ...")
            try:
                text_content, segments, audio_temp_files = await processor.extract_audio_transcript(url)
                temp_files.extend(audio_temp_files)
                
                if not text_content:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –≤–∏–¥–µ–æ.")
                    return
                
                await message.answer("üé§ –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é Whisper AI...")
                # Find the txt file in temp_files
                for file in temp_files:
                    if file.suffix == '.txt':
                        txt_path = file
                        break
                        
            except ValueError as e:
                await message.answer(f"‚ùå {str(e)}")
                return
            except Exception as e:
                logger.error(f"Error processing audio: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ.")
                return
        
        if not text_content or len(text_content.strip()) < 10:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –≤–∏–¥–µ–æ.")
            return
        
        # Step 3: Send text file
        await message.answer("üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª...")
        try:
            document = FSInputFile(txt_path, filename=f"tiktok_content.txt")
            await message.answer_document(document, caption="üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ TikTok –≤–∏–¥–µ–æ")
        except TelegramBadRequest as e:
            logger.warning(f"Failed to send document: {e}")
            await message.answer("üìÑ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω!")
        
        # Step 4: GPT-5 Analysis
        await message.answer("üß† –ó–∞–ø—É—Å–∫–∞—é GPT-5 –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
        
        if not openai_client:
            await message.answer("‚ùå GPT-5 –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        try:
            analysis, analysis_path = await processor.analyze_content(text_content, segments)
            if analysis_path:
                temp_files.append(analysis_path)

            # Step 5: Send analysis
            if not analysis or not analysis.strip():
                await message.answer("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ä–æ–ª–∏–∫ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
            elif analysis_path is not None:
                await message.answer("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç...")
                try:
                    document = FSInputFile(analysis_path, filename="GPT_TikTok_Analysis.txt")
                    await message.answer_document(document, caption="üß† –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ | TikTok Content Intelligence")
                except TelegramBadRequest as e:
                    logger.warning(f"Failed to send analysis document: {e}")
                    await message.answer("üìä –ê–Ω–∞–ª–∏–∑ (–≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö):")
                    chunks = processor.send_analysis_chunks(analysis)
                    for chunk in chunks:
                        await message.answer(chunk)
            else:
                # No file created; send chunks as messages
                await message.answer("üìä –ê–Ω–∞–ª–∏–∑ (–≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö):")
                chunks = processor.send_analysis_chunks(analysis)
                for chunk in chunks:
                    await message.answer(chunk)
        except Exception as e:
            logger.error(f"Error during GPT-5 analysis: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å GPT-5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        # Cleanup
        cleanup_temp_files(*temp_files)
        if openai_client:
            try:
                await openai_client.close()
            except Exception:
                pass
        
        logger.info(f"Successfully processed TikTok video for user {message.from_user.id}")
        
    except Exception as e:
        logger.error(f"Error processing TikTok video: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        
        # Cleanup on error
        try:
            cleanup_temp_files(*temp_files)
            if openai_client:
                try:
                    await openai_client.close()
                except Exception:
                    pass
        except:
            pass
    
    finally:
        # Clear processing state
        await state.clear()


@router.message()
async def handle_other_messages(message: Message):
    """Handle other messages."""
    await message.answer(
        "ü§ñ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ GPT-5!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
    )

